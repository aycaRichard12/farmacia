/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.mycompany.taller_farmacia;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author HP
 */
public class Cliente extends javax.swing.JPanel {

    /**
     * Creates new form Cliente
     */
            Connection conexion = login.getConexionGlobal();

    public Cliente() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField4 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        txtnombre = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtapellido = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtedad = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabla_cliente = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        txtIdCliente = new javax.swing.JTextField();

        jTextField4.setText("jTextField4");

        setBackground(new java.awt.Color(255, 255, 255));
        setBorder(javax.swing.BorderFactory.createEtchedBorder());
        setPreferredSize(new java.awt.Dimension(800, 452));

        jButton1.setBackground(new java.awt.Color(153, 255, 153));
        jButton1.setText("Registrar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel2.setText("Nombre Cliente");

        jLabel3.setText("Apellido Cliente");

        jLabel4.setText("Edad");

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel1.setText("Registro Cliente");

        tabla_cliente.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null}
            },
            new String [] {
                "NÂ°", "Nombre", "Apellido", "Edad", "Funciones"
            }
        ));
        tabla_cliente.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabla_clienteMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tabla_cliente);

        jButton2.setText("Mostrar Clientes");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setBackground(new java.awt.Color(51, 51, 255));
        jButton3.setText("Editar");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setBackground(new java.awt.Color(255, 51, 51));
        jButton4.setText("Eliminar");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton2)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 2, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(txtnombre, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtapellido, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel3))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(txtedad, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(75, 75, 75)
                                        .addComponent(jButton1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jButton3)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jButton4))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(156, 156, 156)
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txtIdCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 0, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(64, 64, 64)))
                        .addGap(24, 24, 24))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(txtIdCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel3)
                                .addComponent(jLabel4)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtnombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtapellido, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtedad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton1)
                        .addComponent(jButton3)
                        .addComponent(jButton4)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 98, Short.MAX_VALUE)
                .addComponent(jButton2)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
      try {
            // Recuperar los valores de los campos de texto
            String nombre = txtnombre.getText().trim();
            String apellido = txtapellido.getText().trim();
            int edad = Integer.parseInt(txtedad.getText().trim());

            // Verificar que los campos no estÃ©n vacÃ­os
            if (nombre.isEmpty() || apellido.isEmpty() || txtedad.getText().trim().isEmpty()) {
                JOptionPane.showMessageDialog(this, 
                    "Por favor, completa todos los campos.", 
                    "Error", 
                    JOptionPane.WARNING_MESSAGE);
                return;
            }

            // Preparar la consulta para insertar datos
            String query = "INSERT INTO CLIENTE (NOMBRE_CLIENTE, APELLIDO_CLIENTE, EDAD) VALUES (?, ?, ?)";

            // Crear una declaraciÃ³n preparada
            PreparedStatement pst = conexion.prepareStatement(query);

            // Asignar los valores a la consulta
            pst.setString(1, nombre);
            pst.setString(2, apellido);
            pst.setInt(3, edad);

            // Ejecutar la consulta
            int rowsAffected = pst.executeUpdate();

            // Verificar si la inserciÃ³n fue exitosa
            if (rowsAffected > 0) {
                JOptionPane.showMessageDialog(this, 
                    "Registro exitoso.", 
                    "Ãxito", 
                    JOptionPane.INFORMATION_MESSAGE);

                // Limpiar los campos de texto
                txtnombre.setText("");
                txtapellido.setText("");
                txtedad.setText("");
            } else {
                JOptionPane.showMessageDialog(this, 
                    "No se pudo registrar. Intenta nuevamente.", 
                    "Error", 
                    JOptionPane.ERROR_MESSAGE);
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, 
                "Error al acceder a la base de datos: " + ex.getMessage(), 
                "Error de BD", 
                JOptionPane.ERROR_MESSAGE);
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, 
                "La edad debe ser un nÃºmero vÃ¡lido.", 
                "Error de validaciÃ³n", 
                JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_jButton1ActionPerformed
   private void cargarDatosCliente(int idCliente) {
        try {
            String query = "SELECT * FROM CLIENTE WHERE IDCLIENTE = ?";
            PreparedStatement pst = conexion.prepareStatement(query);
            pst.setInt(1, idCliente);

            ResultSet rs = pst.executeQuery();

            if (rs.next()) {
                txtnombre.setText(rs.getString("NOMBRE_CLIENTE"));
                txtapellido.setText(rs.getString("APELLIDO_CLIENTE"));
                txtedad.setText(String.valueOf(rs.getInt("EDAD")));
            } else {
                JOptionPane.showMessageDialog(this, 
                    "No se encontrÃ³ el cliente con ID: " + idCliente, 
                    "Error", 
                    JOptionPane.WARNING_MESSAGE);
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, 
                "Error al cargar los datos del cliente: " + ex.getMessage(), 
                "Error de BD", 
                JOptionPane.ERROR_MESSAGE);
        }
}
private void actualizarCliente(int idCliente) {
    try {
        String nombre = txtnombre.getText().trim();
        String apellido = txtapellido.getText().trim();
        int edad = Integer.parseInt(txtedad.getText().trim());

        // Validar que los campos no estÃ©n vacÃ­os
        if (nombre.isEmpty() || apellido.isEmpty() || txtedad.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, 
                "Por favor, completa todos los campos.", 
                "Error", 
                JOptionPane.WARNING_MESSAGE);
            return;
        }

        // Consulta SQL para actualizar el cliente
        String query = "UPDATE CLIENTE SET NOMBRE_CLIENTE = ?, APELLIDO_CLIENTE = ?, EDAD = ? WHERE IDCLIENTE = ?";

        PreparedStatement pst = conexion.prepareStatement(query);
        pst.setString(1, nombre);
        pst.setString(2, apellido);
        pst.setInt(3, edad);
        pst.setInt(4, idCliente);

        int rowsAffected = pst.executeUpdate();

        if (rowsAffected > 0) {
            JOptionPane.showMessageDialog(this, 
                "Cliente actualizado correctamente.", 
                "Ãxito", 
                JOptionPane.INFORMATION_MESSAGE);

            // Limpiar los campos despuÃ©s de actualizar
            txtnombre.setText("");
            txtapellido.setText("");
            txtedad.setText("");
            txtIdCliente.setText("");
        } else {
            JOptionPane.showMessageDialog(this, 
                "No se pudo actualizar el cliente. Intenta nuevamente.", 
                "Error", 
                JOptionPane.ERROR_MESSAGE);
        }
    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(this, 
            "Error al actualizar el cliente: " + ex.getMessage(), 
            "Error de BD", 
            JOptionPane.ERROR_MESSAGE);
    } catch (NumberFormatException ex) {
        JOptionPane.showMessageDialog(this, 
            "La edad debe ser un nÃºmero vÃ¡lido.", 
            "Error de validaciÃ³n", 
            JOptionPane.WARNING_MESSAGE);
    }
}

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
       try {
        // Crear el modelo para la tabla
            DefaultTableModel modelo = new DefaultTableModel();
            modelo.addColumn("IDCLIENTE");
            modelo.addColumn("NOMBRE_CLIENTE");
            modelo.addColumn("APELLIDO_CLIENTE");
            modelo.addColumn("EDAD");

            // Asignar el modelo al JTable
            tabla_cliente.setModel(modelo);

            // Consulta para obtener los datos de CLIENTE
            String query = "SELECT * FROM CLIENTE";

            // Crear una declaraciÃ³n preparada
            PreparedStatement pst = conexion.prepareStatement(query);

            // Ejecutar la consulta
            ResultSet rs = pst.executeQuery();

            // Recorrer los resultados y aÃ±adirlos al modelo de la tabla
            while (rs.next()) {
                Object[] fila = new Object[4];
                fila[0] = rs.getInt("IDCLIENTE");
                fila[1] = rs.getString("NOMBRE_CLIENTE");
                fila[2] = rs.getString("APELLIDO_CLIENTE");
                fila[3] = rs.getInt("EDAD");

                modelo.addRow(fila);
            }

            // Mensaje de Ã©xito si los datos se cargaron correctamente
            JOptionPane.showMessageDialog(this, 
                "Datos cargados correctamente.", 
                "Ãxito", 
                JOptionPane.INFORMATION_MESSAGE);

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, 
                "Error al acceder a la base de datos: " + ex.getMessage(), 
                "Error de BD", 
                JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void tabla_clienteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabla_clienteMouseClicked
        int fila = tabla_cliente.rowAtPoint(evt.getPoint());
        int idcliente = Integer.parseInt(tabla_cliente.getValueAt(fila, 0).toString());
        cargarDatosCliente(idcliente);
        txtIdCliente.setText(idcliente+"");
    }//GEN-LAST:event_tabla_clienteMouseClicked

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        int idCliente = Integer.parseInt(txtIdCliente.getText().trim());
        actualizarCliente(idCliente);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        try {
            // Obtener el ID del cliente que se desea eliminar
            int idCliente = Integer.parseInt(txtIdCliente.getText().trim());

            // Validar que el ID no estÃ© vacÃ­o o sea invÃ¡lido
            if (txtIdCliente.getText().trim().isEmpty()) {
                JOptionPane.showMessageDialog(this, 
                    "Por favor, ingresa el ID del cliente a eliminar.", 
                    "Error", 
                    JOptionPane.WARNING_MESSAGE);
                return;
            }

            // Consulta SQL para eliminar el cliente
            String query = "DELETE FROM CLIENTE WHERE IDCLIENTE = ?";

            // Crear una declaraciÃ³n preparada
            PreparedStatement pst = conexion.prepareStatement(query);

            // Asignar el ID del cliente a la consulta
            pst.setInt(1, idCliente);

            // Ejecutar la consulta
            int rowsAffected = pst.executeUpdate();

            // Verificar si se eliminÃ³ el cliente
            if (rowsAffected > 0) {
                JOptionPane.showMessageDialog(this, 
                    "Cliente eliminado correctamente.", 
                    "Ãxito", 
                    JOptionPane.INFORMATION_MESSAGE);

                // Limpiar el campo de texto despuÃ©s de la eliminaciÃ³n
                txtIdCliente.setText("");
                txtnombre.setText("");
                txtapellido.setText("");
                txtedad.setText("");
            
            } else {
                JOptionPane.showMessageDialog(this, 
                    "No se encontrÃ³ un cliente con el ID especificado.", 
                    "Error", 
                    JOptionPane.ERROR_MESSAGE);
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, 
                "Error al eliminar el cliente: " + ex.getMessage(), 
                "Error de BD", 
                JOptionPane.ERROR_MESSAGE);
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, 
                "El ID del cliente debe ser un nÃºmero vÃ¡lido.", 
                "Error de validaciÃ³n", 
                JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_jButton4ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTable tabla_cliente;
    private javax.swing.JTextField txtIdCliente;
    private javax.swing.JTextField txtapellido;
    private javax.swing.JTextField txtedad;
    private javax.swing.JTextField txtnombre;
    // End of variables declaration//GEN-END:variables
}
