/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.mycompany.taller_farmacia;

import java.awt.Image;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author HP
 */
public class producto extends javax.swing.JPanel {

    /**
     * Creates new form producto
     */
            Connection conexion = login.getConexionGlobal();
byte[] datosImagen ;
    public producto() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        txtCodigo_Medicamento = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtNombre_Medicamento = new javax.swing.JTextField();
        jComboBoxUsoExterno = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        jComboBoxBioactivo = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabla_productos = new javax.swing.JTable();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        txtdireccion = new javax.swing.JTextField();
        txtIdCliente = new javax.swing.JTextField();

        setBackground(new java.awt.Color(255, 255, 255));

        jButton1.setBackground(new java.awt.Color(153, 255, 153));
        jButton1.setText("Registrar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setText("Codigo Medicamento");

        jLabel2.setText("Nombre Medicamento");

        jComboBoxUsoExterno.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel3.setText("Uso externo");

        jComboBoxBioactivo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel4.setText("Bioactivo");

        jButton2.setBackground(new java.awt.Color(51, 51, 255));
        jButton2.setText("Editar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setBackground(new java.awt.Color(255, 102, 102));
        jButton3.setText("Eliminar");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        tabla_productos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tabla_productos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabla_productosMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tabla_productos);

        jButton4.setText("Ver Productos");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("Cargar datos");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setText("Seleccionar");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jButton4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton5))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 736, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jButton1)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(jButton2)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(jButton3)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel1)
                                        .addComponent(txtCodigo_Medicamento, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGap(18, 18, 18)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel2)
                                        .addComponent(txtNombre_Medicamento, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGap(18, 18, 18)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(jLabel3)
                                            .addGap(86, 86, 86)
                                            .addComponent(jLabel4))
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(jComboBoxUsoExterno, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(txtdireccion, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(jComboBoxBioactivo, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                    .addGap(23, 23, 23)))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(txtIdCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(0, 17, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtCodigo_Medicamento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtNombre_Medicamento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBoxUsoExterno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBoxBioactivo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(txtIdCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(25, 25, 25)))
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jButton3)
                    .addComponent(jButton6)
                    .addComponent(txtdireccion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton4)
                    .addComponent(jButton5))
                .addContainerGap(9, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        try {
            // Limpiar los JComboBox antes de cargar datos
            jComboBoxUsoExterno.removeAllItems();
            jComboBoxBioactivo.removeAllItems();

            // Consulta para cargar datos de PRODUCTOS_EXTERNO
            String queryUsoExterno = "SELECT ID_PRODUCTO_USO_EXTERNO, USO_EXTERNO FROM PRODUCTOS_EXTERNO";
            PreparedStatement pstUsoExterno = conexion.prepareStatement(queryUsoExterno);
            ResultSet rsUsoExterno = pstUsoExterno.executeQuery();

            // Agregar los resultados al JComboBoxUsoExterno
            while (rsUsoExterno.next()) {
                int idUsoExterno = rsUsoExterno.getInt("ID_PRODUCTO_USO_EXTERNO");
                String usoExterno = rsUsoExterno.getString("USO_EXTERNO");
                jComboBoxUsoExterno.addItem(idUsoExterno + " - " + usoExterno); // Opcional: mostrar ID y nombre juntos
            }

            // Consulta para cargar datos de PRODUCTO_BIOACTIVO
            String queryBioactivo = "SELECT ID_PRODUCTO_BIOACTIVO, TIPO_BIOACTIVO FROM PRODUCTO_BIOACTIVO";
            PreparedStatement pstBioactivo = conexion.prepareStatement(queryBioactivo);
            ResultSet rsBioactivo = pstBioactivo.executeQuery();

            // Agregar los resultados al JComboBoxBioactivo
            while (rsBioactivo.next()) {
                int idBioactivo = rsBioactivo.getInt("ID_PRODUCTO_BIOACTIVO");
                String tipoBioactivo = rsBioactivo.getString("TIPO_BIOACTIVO");
                jComboBoxBioactivo.addItem(idBioactivo + " - " + tipoBioactivo); // Opcional: mostrar ID y nombre juntos
               
            }

            // Mensaje de éxito
            JOptionPane.showMessageDialog(this, 
                "Clasificadores cargados correctamente.", 
                "Éxito", 
                JOptionPane.INFORMATION_MESSAGE);

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, 
                "Error al cargar los clasificadores: " + ex.getMessage(), 
                "Error de BD", 
                JOptionPane.ERROR_MESSAGE);
        }
       
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
        // Recuperar los valores de los campos de texto
        String codigo = txtCodigo_Medicamento.getText().trim();
        String nombre = txtNombre_Medicamento.getText().trim();

        // Recuperar el valor seleccionado de jComboBoxUsoExterno
        String seleccionadoUsoExterno = (String) jComboBoxUsoExterno.getSelectedItem();
        int idproductoExterno = Integer.parseInt(seleccionadoUsoExterno.split(" - ")[0]); // Extraer ID

        // Recuperar el valor seleccionado de jComboBoxBioactivo
        String seleccionadoBioactivo = (String) jComboBoxBioactivo.getSelectedItem();
        int idBioactivo = Integer.parseInt(seleccionadoBioactivo.split(" - ")[0]); // Extraer ID

        // Validar que los campos no estén vacíos
        if (codigo.isEmpty() || nombre.isEmpty() || idproductoExterno <= 0 || idBioactivo <= 0) {
            JOptionPane.showMessageDialog(this, 
                "Por favor, completa todos los campos y selecciona los clasificadores.", 
                "Error", 
                JOptionPane.WARNING_MESSAGE);
            return;
        }

        // Leer la imagen y convertirla a bytes si es necesario
        
        

        // Consulta SQL para insertar el producto
        String query = "INSERT INTO PRODUCTO (CODIGO_MEDICAMENTO, NOMBRE_MEDICAMENTO, ID_PRODUCTO_USO_EXTERNO, ID_PRODUCTO_BIOACTIVO, IMG) VALUES (?, ?, ?, ?, ?)";

        // Crear una declaración preparada
        PreparedStatement pst = conexion.prepareStatement(query);

        // Asignar los valores a la consulta
        pst.setString(1, codigo);
        pst.setString(2, nombre);
        pst.setInt(3, idproductoExterno);
        pst.setInt(4, idBioactivo);
        pst.setBytes(5, datosImagen); // Puede ser NULL si no hay imagen

        // Ejecutar la consulta
        int rowsAffected = pst.executeUpdate();

        // Verificar si el registro fue exitoso
        if (rowsAffected > 0) {
            JOptionPane.showMessageDialog(this, 
                "Producto registrado exitosamente.", 
                "Éxito", 
                JOptionPane.INFORMATION_MESSAGE);

            // Limpiar los campos después de registrar
            txtCodigo_Medicamento.setText("");
            txtNombre_Medicamento.setText("");
            jComboBoxUsoExterno.setSelectedIndex(-1);
            jComboBoxBioactivo.setSelectedIndex(-1);
        } else {
            JOptionPane.showMessageDialog(this, 
                "No se pudo registrar el producto. Intenta nuevamente.", 
                "Error", 
                JOptionPane.ERROR_MESSAGE);
        }
    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(this, 
            "Error al registrar el producto: " + ex.getMessage(), 
            "Error de BD", 
            JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_jButton1ActionPerformed
private byte[] convertirImagenABytes(File imagenSeleccionada) {
    try {
        FileInputStream fis = new FileInputStream(imagenSeleccionada);
        byte[] datosImagen = fis.readAllBytes();
        fis.close();
        return datosImagen;
    } catch (IOException ex) {
        JOptionPane.showMessageDialog(this, "Error al convertir la imagen a bytes: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        return null;
    }
}
private void actualizarProducto(int idProducto, String codigo, String nombre, int idUsoExterno, int idBioactivo, byte[] imagen) {
    try {
        // Consulta SQL para actualizar los datos del producto
        String query = "UPDATE PRODUCTO SET CODIGO_MEDICAMENTO = ?, NOMBRE_MEDICAMENTO = ?, ID_PRODUCTO_USO_EXTERNO = ?, ID_PRODUCTO_BIOACTIVO = ?, IMG = ? WHERE IDPRODUCTO = ?";

        PreparedStatement pst = conexion.prepareStatement(query);

        // Asignar los valores
        pst.setString(1, codigo);
        pst.setString(2, nombre);
        pst.setInt(3, idUsoExterno);
        pst.setInt(4, idBioactivo);
        pst.setBytes(5, imagen);
        pst.setInt(6, idProducto);

        int rowsAffected = pst.executeUpdate();

        if (rowsAffected > 0) {
            JOptionPane.showMessageDialog(this, "Producto actualizado correctamente.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(this, "No se pudo actualizar el producto. Intenta nuevamente.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(this, "Error al actualizar el producto: " + ex.getMessage(), "Error de BD", JOptionPane.ERROR_MESSAGE);
    }
}
private void actualizarUsoExterno(int idUsoExterno, String usoExterno) {
    try {
        // Consulta SQL para actualizar el clasificador de uso externo
        String query = "UPDATE PRODUCTOS_EXTERNO SET USO_EXTERNO = ? WHERE ID_PRODUCTO_USO_EXTERNO = ?";
        
        PreparedStatement pst = conexion.prepareStatement(query);

        // Asignar los valores
        pst.setString(1, usoExterno);
        pst.setInt(2, idUsoExterno);

        int rowsAffected = pst.executeUpdate();

        if (rowsAffected > 0) {
            JOptionPane.showMessageDialog(this, "Clasificador de uso externo actualizado correctamente.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(this, "No se pudo actualizar el clasificador de uso externo. Intenta nuevamente.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(this, "Error al actualizar el clasificador de uso externo: " + ex.getMessage(), "Error de BD", JOptionPane.ERROR_MESSAGE);
    }
}
private void actualizarTipoBioactivo(int idBioactivo, String tipoBioactivo) {
    try {
        // Consulta SQL para actualizar el clasificador bioactivo
        String query = "UPDATE PRODUCTO_BIOACTIVO SET TIPO_BIOACTIVO = ? WHERE ID_PRODUCTO_BIOACTIVO = ?";
        
        PreparedStatement pst = conexion.prepareStatement(query);

        // Asignar los valores
        pst.setString(1, tipoBioactivo);
        pst.setInt(2, idBioactivo);

        int rowsAffected = pst.executeUpdate();

        if (rowsAffected > 0) {
            JOptionPane.showMessageDialog(this, "Clasificador bioactivo actualizado correctamente.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(this, "No se pudo actualizar el clasificador bioactivo. Intenta nuevamente.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(this, "Error al actualizar el clasificador bioactivo: " + ex.getMessage(), "Error de BD", JOptionPane.ERROR_MESSAGE);
    }
}

private void mostrarImagenDesdeBytes(byte[] datosImagen) {
   try {
        // Crear un JFileChooser para seleccionar la imagen
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Seleccionar imagen");
        fileChooser.setFileFilter(new FileNameExtensionFilter("Archivos de imagen", "jpg", "png", "jpeg", "bmp"));

        // Mostrar el diálogo de selección
        int result = fileChooser.showOpenDialog(this);

        if (result == JFileChooser.APPROVE_OPTION) {
            // Obtener el archivo seleccionado
            File imagenSeleccionada = fileChooser.getSelectedFile();
            JOptionPane.showMessageDialog(this, "Imagen seleccionada: " + imagenSeleccionada.getName(), "Éxito", JOptionPane.INFORMATION_MESSAGE);
            // Mostrar la imagen desde los bytes
            mostrarImagenDesdeBytes(datosImagen);
        } else {
            JOptionPane.showMessageDialog(this, "No se seleccionó ninguna imagen.", "Advertencia", JOptionPane.WARNING_MESSAGE);
        }
    } catch (Exception ex) {
        JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
}


    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
   
 try {
        // Crear un JFileChooser para seleccionar la imagen
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Seleccionar imagen");
        fileChooser.setFileFilter(new FileNameExtensionFilter("Archivos de imagen", "jpg", "png", "jpeg", "bmp"));

        // Mostrar el diálogo de selección
        int result = fileChooser.showOpenDialog(this);

        if (result == JFileChooser.APPROVE_OPTION) {
            // Obtener el archivo seleccionado
            File imagenSeleccionada = fileChooser.getSelectedFile();

            // Mostrar la ruta del archivo en el JTextField
            txtdireccion.setText(imagenSeleccionada.getAbsolutePath());

            // Mensaje de confirmación
            JOptionPane.showMessageDialog(this, "Imagen seleccionada: " + imagenSeleccionada.getName(), "Éxito", JOptionPane.INFORMATION_MESSAGE);

            // Leer la imagen y convertirla a un array de bytes (opcional)
            FileInputStream fis = new FileInputStream(imagenSeleccionada);
            datosImagen = fis.readAllBytes();
            fis.close();

            // Aquí puedes procesar los bytes (por ejemplo, almacenarlos en una base de datos)
            JOptionPane.showMessageDialog(this, "La imagen fue convertida a bytes correctamente.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(this, "No se seleccionó ninguna imagen.", "Advertencia", JOptionPane.WARNING_MESSAGE);
        }
    } catch (IOException ex) {
        JOptionPane.showMessageDialog(this, "Error al leer la imagen: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }

    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
                                          
    try {
        // Crear el modelo para la tabla
        DefaultTableModel modelo = new DefaultTableModel();
        modelo.addColumn("IDPRODUCTO");
        modelo.addColumn("CODIGO_MEDICAMENTO");
        modelo.addColumn("NOMBRE_MEDICAMENTO");
        modelo.addColumn("NOMBRE_EXTERNO");
        modelo.addColumn("NOMBRE_BIOACTIVO");

        // Asignar el modelo al JTable
        tabla_productos.setModel(modelo);

        // Consulta SQL para listar productos con nombres externos y bioactivos
        String query = "SELECT p.IDPRODUCTO, p.CODIGO_MEDICAMENTO, p.NOMBRE_MEDICAMENTO, " +
                       "px.USO_EXTERNO AS NOMBRE_EXTERNO, pb.TIPO_BIOACTIVO AS NOMBRE_BIOACTIVO " +
                       "FROM PRODUCTO p " +
                       "JOIN PRODUCTOS_EXTERNO px ON p.ID_PRODUCTO_USO_EXTERNO = px.ID_PRODUCTO_USO_EXTERNO " +
                       "JOIN PRODUCTO_BIOACTIVO pb ON p.ID_PRODUCTO_BIOACTIVO = pb.ID_PRODUCTO_BIOACTIVO";

        // Crear una declaración preparada
        PreparedStatement pst = conexion.prepareStatement(query);

        // Ejecutar la consulta
        ResultSet rs = pst.executeQuery();

        // Recorrer los resultados y añadirlos al modelo de la tabla
        while (rs.next()) {
            Object[] fila = new Object[5];
            fila[0] = rs.getInt("IDPRODUCTO");
            fila[1] = rs.getString("CODIGO_MEDICAMENTO");
            fila[2] = rs.getString("NOMBRE_MEDICAMENTO");
            fila[3] = rs.getString("NOMBRE_EXTERNO");
            fila[4] = rs.getString("NOMBRE_BIOACTIVO");

            modelo.addRow(fila);
        }

        // Mensaje de éxito si los datos se cargaron correctamente
        JOptionPane.showMessageDialog(this, 
            "Productos cargados correctamente con nombres externos y bioactivos.", 
            "Éxito", 
            JOptionPane.INFORMATION_MESSAGE);
         
    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(this, 
            "Error al acceder a los productos: " + ex.getMessage(), 
            "Error de BD", 
            JOptionPane.ERROR_MESSAGE);
    } 
    }//GEN-LAST:event_jButton4ActionPerformed

    private void tabla_productosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabla_productosMouseClicked
        int fila = tabla_productos.rowAtPoint(evt.getPoint());
        int idproducto = Integer.parseInt(tabla_productos.getValueAt(fila, 0).toString());
        cargarDatosProducto(idproducto);
        txtIdCliente.setText(idproducto +"");
    }//GEN-LAST:event_tabla_productosMouseClicked
    private  void cargarDatosProducto(int idProducto){
        
    }
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        try {
        // Obtener el ID del producto desde el campo de texto
        int idProducto = Integer.parseInt(txtIdCliente.getText().trim());

        // Validar que el ID no esté vacío
        if (txtIdCliente.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Por favor, ingresa el ID del producto a eliminar.", "Advertencia", JOptionPane.WARNING_MESSAGE);
            return;
        }

        // Confirmación antes de eliminar
        int confirmacion = JOptionPane.showConfirmDialog(this, "¿Estás seguro de que deseas eliminar este producto?", "Confirmación", JOptionPane.YES_NO_OPTION);
        if (confirmacion != JOptionPane.YES_OPTION) {
            return; // Cancelar eliminación
        }

        // Consulta SQL para eliminar el producto
        String query = "DELETE FROM PRODUCTO WHERE IDPRODUCTO = ?";

        // Crear una declaración preparada
        PreparedStatement pst = conexion.prepareStatement(query);
        pst.setInt(1, idProducto);

        // Ejecutar la consulta
        int rowsAffected = pst.executeUpdate();

        // Verificar si el producto fue eliminado
        if (rowsAffected > 0) {
            JOptionPane.showMessageDialog(this, "Producto eliminado correctamente.", "Éxito", JOptionPane.INFORMATION_MESSAGE);

            // Limpiar el campo después de eliminar
            txtIdCliente.setText("");
        } else {
            JOptionPane.showMessageDialog(this, "No se encontró un producto con el ID especificado.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(this, "Error al eliminar el producto: " + ex.getMessage(), "Error de BD", JOptionPane.ERROR_MESSAGE);
    } catch (NumberFormatException ex) {
        JOptionPane.showMessageDialog(this, "El ID del producto debe ser un número válido.", "Error de validación", JOptionPane.WARNING_MESSAGE);
    }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
       try {
        // Recuperar el ID del producto desde el campo de texto
        int idProducto = Integer.parseInt(txtIdCliente.getText().trim());

        // Recuperar el código y el nombre del medicamento
        String codigo = txtCodigo_Medicamento.getText().trim();
        String nombre = txtNombre_Medicamento.getText().trim();

        // Obtener el ID desde el JComboBox de Uso Externo
        String seleccionadoUsoExterno = (String) jComboBoxUsoExterno.getSelectedItem();
        int idUsoExterno = Integer.parseInt(seleccionadoUsoExterno.split(" - ")[0]);

        // Obtener el ID desde el JComboBox de Bioactivo
        String seleccionadoBioactivo = (String) jComboBoxBioactivo.getSelectedItem();
        int idBioactivo = Integer.parseInt(seleccionadoBioactivo.split(" - ")[0]);

        // Recuperar el clasificador externo y bioactivo como texto si necesitas actualizar también los nombres
        

        // Actualizar los datos del producto
        actualizarProducto(idProducto, codigo, nombre, idUsoExterno, idBioactivo, datosImagen);

        // Actualizar los clasificadores externos y bioactivos
        

        JOptionPane.showMessageDialog(this, "Producto y clasificadores actualizados correctamente.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
    } catch (NumberFormatException ex) {
        JOptionPane.showMessageDialog(this, "Por favor, ingresa datos válidos en los campos.", "Error de Validación", JOptionPane.WARNING_MESSAGE);
    } catch (Exception ex) {
        JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_jButton2ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JComboBox<String> jComboBoxBioactivo;
    private javax.swing.JComboBox<String> jComboBoxUsoExterno;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tabla_productos;
    private javax.swing.JTextField txtCodigo_Medicamento;
    private javax.swing.JTextField txtIdCliente;
    private javax.swing.JTextField txtNombre_Medicamento;
    private javax.swing.JTextField txtdireccion;
    // End of variables declaration//GEN-END:variables
}
